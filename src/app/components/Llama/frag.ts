export const frag = `#define GLSLIFY 1\nvec2 matcap(vec3 eye, vec3 normal) {\n  vec3 reflected = reflect(eye, normal);\n  float m = 2.8284271247461903 * sqrt( reflected.z+1.0 );\n  return reflected.xy / m + 0.5;\n}\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nuniform float uTime;\n\nuniform vec2 uMouse;\nuniform sampler2D uDispTexture;\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvoid main(){\n    vec2 uvTexture = vUv;\n\n    vec2 mouseUv = uMouse;\n    float dist = distance(uvTexture,mouseUv) * 2.0 - 0.5;\n    dist *= 1.5;\n\n    vec4 dispTexture = texture2D(uDispTexture,uvTexture);\n    vec2 dispUv = vec2(uvTexture.x * (dispTexture.r * 1.0 ) , uvTexture.y * (dispTexture.r * 1.0));\n    \n    float strength = vUv.x * vUv.y;\n\n    float dispMaskX2 = step(dist,dispUv.x-0.25);\n    float dispMaskY2 = step(dist,dispUv.y-0.25);\n    float dist2 = dispMaskX2 * dispMaskY2 * -1.0;\n\n    // vec4 finalColor = vec4(vec3(strength + 0.021,strength+0.025,strength + 0.1),1.0);\n    vec4 finalColor = vec4(vec3(strength + .421,strength+.425,strength + .7),1.0);\n\n    finalColor.r += dist2 * .2;\n    finalColor.g += dist2 * .1;\n    finalColor.b += dist2 * .6;\n    \n    finalColor.r += sin((2.0 * vNormal.y + dist2 )+ uTime * .5 );\n\n    gl_FragColor = finalColor;\n\n}`;
export const v = `#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vNormal;\nuniform float uTime;\nuniform vec2 uMouse;\nuniform float uCurveValue;\nuniform float uHoverNoiseValue;\nconst float PI = 3.14159265359;\nvoid main(){\n    vUv = uv;\n    vNormal = normal;\n    vec3 pos = position;    \n    vec3 curve = vec3(\n        sin(uv.y * PI * uHoverNoiseValue) * .2,\n        0.0,\n        0.0\n    );\n    pos += curve;\n\n    vec4 modelPosition = modelMatrix * vec4(pos,1.0);\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n\n    gl_Position = projectedPosition;\n}`;

export const frag2 = `#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vNormal;\nuniform float uTime;\nuniform vec2 uMeshSize;\nuniform vec2 uTextureSize;\nuniform sampler2D uTexture;\nuniform vec2 uMouse;\nuniform float uHoverNoiseValue;\n\nvoid main(){\n    vec2 uvTexture = vUv;\n    vec2 resolutionRatio = vec2(\n        min((uMeshSize.x / uMeshSize.y) / (uTextureSize.x / uTextureSize.y), 1.0),\n        min((uMeshSize.y / uMeshSize.x) / (uTextureSize.y / uTextureSize.x), 1.0)\n    );\n    uvTexture -= 0.5;\n    uvTexture *= resolutionRatio;\n    uvTexture += 0.5;\n\n    vec4 baseColor = texture2D(uTexture, uvTexture);\n\n    vec2 gridUv = vec2(floor(uvTexture.x * 10.0) / 10.0, floor(uvTexture.y * 10.0) / 10.0);\n\n    baseColor.rg += gridUv * uHoverNoiseValue;\n\n    gl_FragColor = baseColor;\n}`;
